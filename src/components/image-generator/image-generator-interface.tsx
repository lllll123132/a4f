"use client";

import { useState, FormEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Image as ImageIcon, AlertTriangle, Sparkles } from 'lucide-react';
import NextImage from 'next/image'; // Renamed to avoid conflict with Lucide's Image
import { generateImage, type GenerateImageInput, type GenerateImageOutput } from '@/ai/flows/ai-image-generation';
import { useSettings } from '@/hooks/use-settings';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useToast } from '@/hooks/use-toast';

export function ImageGeneratorInterface() {
  const { isSetupComplete, apiKey, apiBaseUrl, imageModelId } = useSettings();
  const [prompt, setPrompt] = useState('');
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();


  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!prompt.trim() || isLoading) return;

    setIsLoading(true);
    setError(null);
    setGeneratedImageUrl(null);

    try {
      // Note: The generateImage flow uses Genkit's configuration.
      // User's apiKey, apiBaseUrl, imageModelId are collected but not directly
      // plumbed into this specific pre-built flow without modifying Genkit setup.
      const result: GenerateImageOutput = await generateImage({ prompt } as GenerateImageInput);
      setGeneratedImageUrl(result.imageUrl);
      toast({
        title: "Image Generated!",
        description: "Your image has been successfully created.",
      });
    } catch (err: any) {
      console.error("Image Generation Error:", err);
      setError(err.message || "An error occurred while generating the image.");
      toast({
        title: "Image Generation Failed",
        description: err.message || "Could not generate image.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  if (!isSetupComplete) {
    return (
      <div className="flex flex-col items-center justify-center h-full p-8">
        <Alert variant="destructive" className="max-w-md">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Setup Required</AlertTitle>
          <AlertDescription>
            Please complete the setup process in the settings page to use Image Generation.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="flex justify-center items-start py-8 px-4">
      <Card className="w-full max-w-2xl shadow-xl">
        <CardHeader>
          <div className="flex items-center space-x-2 mb-2">
            <ImageIcon className="h-8 w-8 text-primary" />
            <CardTitle className="text-2xl font-headline">AI Image Generator</CardTitle>
          </div>
          <CardDescription>
            Describe the image you want to create. Be as specific or creative as you like!
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-6">
            <div>
              <Textarea
                value={prompt}
                onChange={e => setPrompt(e.target.value)}
                placeholder="e.g., A futuristic cityscape at sunset, with flying cars and neon lights..."
                className="min-h-[100px] text-base"
                rows={4}
                disabled={isLoading}
              />
            </div>
            {error && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Generation Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            {isLoading && (
              <div className="flex flex-col items-center justify-center p-8 border-2 border-dashed rounded-lg bg-muted/50 h-[300px]">
                <Loader2 className="h-16 w-16 animate-spin text-primary mb-4" />
                <p className="text-muted-foreground">Generating your masterpiece...</p>
              </div>
            )}
            {!isLoading && generatedImageUrl && (
              <div className="border-2 border-dashed rounded-lg overflow-hidden aspect-square bg-muted/30">
                 <NextImage
                    src={generatedImageUrl}
                    alt="Generated by AI"
                    width={512}
                    height={512}
                    className="w-full h-full object-contain"
                    data-ai-hint="generated art"
                  />
              </div>
            )}
             {!isLoading && !generatedImageUrl && (
                <div className="flex flex-col items-center justify-center p-8 border-2 border-dashed rounded-lg bg-muted/50 h-[300px]">
                    <Sparkles className="h-16 w-16 text-primary/70 mb-4" />
                    <p className="text-muted-foreground text-center">Your generated image will appear here.</p>
                </div>
            )}
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full" disabled={isLoading || !prompt.trim()}>
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <ImageIcon className="mr-2 h-4 w-4" />
              )}
              Generate Image
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}
