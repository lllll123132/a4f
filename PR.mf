# Project Review: Scira Frontend Demo

This document provides a comprehensive overview of the Scira Frontend Demo application, detailing its architecture, UI components, core logic, and API integrations.

## 1. Core Functionality

The application is a feature-rich, client-side AI chat interface built with Next.js and React. It is designed to be a flexible playground for interacting with various large language models (LLMs) through a unified backend service.

- **Primary Interaction**: Users engage in text-based conversations with AI models.
- **Model & Plan Selection**: Users can switch between different models and service tiers (Free/Pro), which are fetched dynamically from an API.
- **Customization**: The experience is highly customizable, allowing users to toggle features like chat history, Text-to-Speech (TTS), Speech-to-Text (STT), and manage API keys for various services.
- **State Management**: The application relies heavily on React hooks and local storage to manage state, user preferences, and conversation history.

---

## 2. API & Server Actions

The frontend communicates with a backend service hosted at `https://api.a4f.co/v1` and utilizes separate third-party APIs.

### 2.1. Main Backend (`https://api.a4f.co/v1`)

This is the central API gateway that proxies requests to various underlying AI model providers.

- **Authentication**: All requests are authenticated using a Bearer token (A4F API Key).
- **Endpoints**:
    - `GET /models`: Fetches a list of available AI models based on the user's selected plan (`free` or `pro`).
    - `GET /usage`: Retrieves user account information, including plan details, usage statistics, and GitHub profile info.
    - `POST /chat/completions`: Streams chat responses from the selected AI model. The frontend uses the official OpenAI SDK configured with this custom `baseURL`.
    - `POST /images/generations`: Handles image generation prompts.

### 2.2. Third-Party APIs

- **ElevenLabs API**:
    - **Endpoint**: `https://api.elevenlabs.io/v1/text-to-speech/{voiceId}`
    - **Functionality**: Used for the premium Text-to-Speech feature. This is called via a Next.js Server Action (`generateSpeech` in `app/actions.ts`).
    - **Authentication**: Requires a dedicated ElevenLabs API key.

- **Tavily API**:
    - **Functionality**: Implied by the requirement of a "Tavily API Key" for the 'Web' search group. This API is likely used for search-augmented generation but is called by the A4F backend, not directly from the client.

### 2.3. Webhooks

- The current project is purely a frontend application. There are **no webhooks** configured or received by the client-side code.

---

## 3. UI (User Interface)

The UI is built with Next.js, React, and styled with Tailwind CSS, using ShadCN for its component primitives. It is responsive and supports both light and dark themes.

### 3.1. Main Page (`app/page.tsx`)

- **Initial State**: A centered view prompts the user to start a conversation.
- **Active Chat State**: Displays the conversation history (`components/messages.tsx`) and a fixed input form at the bottom.
- **Components**:
    - `PageNavbar`: Top navigation with "New Chat," history toggle, theme switcher, and settings button.
    - `FormComponent`: The main input component, which includes the text area, model switcher, group selector, and action buttons (send, stop, attach, etc.).
    - `Messages`: Renders the list of user and assistant messages.
    - `SettingsDialog`: A comprehensive, tabbed dialog for managing the entire application.
    - `ChatHistorySidebar`: A slide-out panel for viewing and managing past conversations.

### 3.2. Core UI Library (`components/ui/`)

This directory contains the base building blocks for the application's interface, derived from ShadCN. Key components include:

- `Button`, `Input`, `Textarea`
- `Dialog`, `Sheet` (for sidebars)
- `DropdownMenu`, `Popover`, `Select`, `Tooltip`
- `Card`, `Badge`, `Progress`, `Skeleton`
- `Tabs`, `Accordion`, `Collapsible`

---

## 4. Core Logic & State Management

The application logic is primarily managed through a set of custom React hooks located in `app/page-hooks/`.

### 4.1. `useChatLogic` (`app/page-hooks/use-chat-logic.ts`)

This is the main orchestrator hook that composes all other logic hooks. It manages:
- The complete application state, including messages, input, attachments, and user settings.
- Integration of chat history (saving, loading, deleting).
- All customization feature toggles (TTS, STT, etc.).
- The master "Reset Application" functionality.

### 4.2. `useApiManagement` (`app/page-hooks/chat-logic/useApiManagement.ts`)

- Handles fetching models and account information from the API.
- Manages the state for the current plan (`free`/`pro`).
- Manages API keys for all services (`a4f`, `tavily`, `elevenlabs`) using the `useApiKeys` hook.

### 4.3. `useChatStreamHandler` (`app/page-hooks/chat-logic/useChatStreamHandler.ts`)

- Contains the primary logic for sending user prompts to the API.
- Handles the streaming response, including parsing `<think>` tags and updating the UI in real-time.
- Manages error states during the chat completion process (e.g., rate limits, plan restrictions).
- Implements the "Retry" and "Stop" functionalities.

### 4.4. `useLocalStorage` (`hooks/use-local-storage.tsx`)

A utility hook that provides a React state variable synchronized with the browser's `localStorage`. It's used to persist all user settings, API keys, and chat history.

---

## 5. Account Dialog & Settings

The settings functionality is consolidated into a single, powerful dialog component (`components/settings-dialog.tsx`). This dialog is organized into three tabs:

1.  **Account**:
    - Displays user profile information (avatar, username, email) fetched from the `/usage` endpoint.
    - Shows current plan, usage statistics (token counts, request counts), and rate limits.
    - Provides a "Logout & Reset App" button for a full factory reset of the application's state in `localStorage`.

2.  **API Keys**:
    - Provides input fields to manage API keys for `A4F` (required) and `Tavily` (optional for web search).

3.  **Customize**:
    - **Core Features**: Toggles for enabling/disabling UI elements like the History button, System Prompt button, and Attachment button.
    - **Text-to-Speech**: A sub-section to enable/disable TTS and configure the provider (`Browser` vs. `ElevenLabs`), including speed and voice selection.
    - **Enabled Search Groups**: Allows the user to show or hide different chat modes (e.g., Web, Coder, YouTube) from the main input form.
